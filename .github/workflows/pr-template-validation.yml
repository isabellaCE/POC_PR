name: Validate PR Template

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  validate_pr_body:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR Body
        id: get_pr_body
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          # Escape special characters for sed/grep if needed later, but for basic string check, not strictly necessary.
          echo "PR_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate PR Template Sections
        env:
          PR_BODY: ${{ steps.get_pr_body.outputs.PR_BODY }}
        run: |
          echo "Validating PR body..."
          INVALID_SECTIONS=""

          # Function to check if a section is present and not just lorem ipsum
          check_section() {
            local section_title="$1"
            local expected_content_regex="$2" # Regex to check if content is meaningful (e.g., not lorem ipsum)
            local section_found=$(echo "$PR_BODY" | grep -qc "$section_title")
            local content_meaningful=true

            if [ "$section_found" -eq 0 ]; then
              echo "‚ùå Section missing: $section_title"
              INVALID_SECTIONS="${INVALID_SECTIONS} - Se√ß√£o '$section_title' est√° faltando.\n"
            else
              echo "‚úÖ Section found: $section_title"
              # Extract content after section_title until the next section_title or end of document
              # This is a simplified approach; for complex templates, a more robust parsing might be needed.
              SECTION_CONTENT=$(echo "$PR_BODY" | awk "/$section_title/{flag=1;next}/^#### \*\*:/||/^<hr \/>/{flag=0}flag" | tr -d '\n')

              if echo "$SECTION_CONTENT" | grep -qE "$expected_content_regex"; then
                echo "‚ùå Section '$section_title' contains placeholder content."
                content_meaningful=false
                INVALID_SECTIONS="${INVALID_SECTIONS} - Conte√∫do da se√ß√£o '$section_title' parece ser um placeholder ou est√° vazio.\n"
              else
                echo "‚úÖ Section '$section_title' content looks good."
              fi
            fi
          }

          # --- Perform Checks ---
          # Check for PR Title. The title is separate from the body, so it's a direct check.
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^:clipboard: ]]; then
            echo "‚úÖ PR Title starts with :clipboard:."
          else
            echo "‚ùå PR Title does not start with :clipboard:."
            INVALID_SECTIONS="${INVALID_SECTIONS} - O t√≠tulo do PR deve come√ßar com ':clipboard:'.\n"
          fi

          # Check for "T√≠tulo da demanda" in the body (if you want to double-check, otherwise title is enough)
          if ! echo "$PR_BODY" | grep -q "# \*\*:\clipboard: T√≠tulo da demanda\*\*"; then
            echo "‚ùå Title heading '# **:clipboard: T√≠tulo da demanda**' not found in body."
            INVALID_SECTIONS="${INVALID_SECTIONS} - O cabe√ßalho principal '# **:clipboard: T√≠tulo da demanda**' est√° faltando no corpo do PR.\n"
          fi

          # Validate specific sections
          check_section "#### \*\*:rocket: Vis√£o Geral\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"
          check_section "#### \*\*:sparkles: Mudan√ßas Implementadas\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"
          check_section "\*\*:\mechanic: Evid√™ncias de testes local:\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"

          # Validate "Observa√ß√µes"
          if ! echo "$PR_BODY" | grep -q "> ‚õî Observa√ß√µes:"; then
            echo "‚ùå Section missing: Observa√ß√µes"
            INVALID_SECTIONS="${INVALID_SECTIONS} - Se√ß√£o 'Observa√ß√µes' est√° faltando.\n"
          elif echo "$PR_BODY" | grep -qE "> ‚õî Observa√ß√µes:\s*\n>\s*lorem ipsum dolor sit amet consectetur adipisicing elit\.|> ‚õî Observa√ß√µes:\s*\n>\s*$" ; then
            echo "‚ùå Section 'Observa√ß√µes' contains placeholder content."
            INVALID_SECTIONS="${INVALID_SECTIONS} - Conte√∫do da se√ß√£o 'Observa√ß√µes' parece ser um placeholder ou est√° vazio.\n"
          else
            echo "‚úÖ Section 'Observa√ß√µes' found and content looks good."
          fi

          # Validate "Demandas relacionadas"
          if ! echo "$PR_BODY" | grep -q "> üîñ Demandas relacionadas:"; then
            echo "‚ùå Section missing: Demandas relacionadas"
            INVALID_SECTIONS="${INVALID_SECTIONS} - Se√ß√£o 'Demandas relacionadas' est√° faltando.\n"
          elif echo "$PR_BODY" | grep -qE "> üîñ Demandas relacionadas:\s*\n\s*- \[MK-0000\]\(https://trackco.atlassian.net/browse/MK-0000\)\s*\n\s*- \[MK-0000\]\(https://trackco.atlassian.net/browse/MK-0000\)" || \
               echo "$PR_BODY" | grep -qE "> üîñ Demandas relacionadas:\s*\n\s*$" ; then
            echo "‚ùå Section 'Demandas relacionadas' contains placeholder content."
            INVALID_SECTIONS="${INVALID_SECTIONS} - Conte√∫do da se√ß√£o 'Demandas relacionadas' parece ser um placeholder ou est√° vazio.\n"
          else
            echo "‚úÖ Section 'Demandas relacionadas' found and content looks good."
          fi


          if [ -n "$INVALID_SECTIONS" ]; then
            COMMENT_BODY="‚ö†Ô∏è **Valida√ß√£o do Template do PR Falhou!** ‚ö†Ô∏è\n\nPor favor, corrija as seguintes quest√µes no corpo do seu Pull Request para que ele siga o template:\n\n$INVALID_SECTIONS\n\n---"
            echo "COMMENT_BODY<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "::set-output name=validation_failed::true" >> $GITHUB_OUTPUT # Set output for subsequent step
            exit 1 # Fail the job
          else
            echo "::set-output name=validation_failed::false" >> $GITHUB_OUTPUT
            echo "‚úÖ PR template is valid!"
          fi
        id: validate_template

      - name: Add comment on PR failure
        if: failure() && steps.validate_template.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `${{ steps.validate_template.outputs.COMMENT_BODY }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
