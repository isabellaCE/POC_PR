name: Validate PR Template

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  validate_pr_body:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR Body
        id: get_pr_body
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          # Escape special characters for sed/grep if needed later, but for basic string check, not strictly necessary.
          echo "PR_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate PR Template Sections
        env:
          PR_BODY: ${{ steps.get_pr_body.outputs.PR_BODY }}
        run: |
          echo "Validating PR body..."
          INVALID_SECTIONS=""

          # Function to check if a section is present and not just lorem ipsum
          check_section() {
            local section_title="$1"
            local expected_content_regex="$2" # Regex to check if content is meaningful (e.g., not lorem ipsum)
            local section_found=$(echo "$PR_BODY" | grep -qc "$section_title")
            local content_meaningful=true

            if [ "$section_found" -eq 0 ]; then
              echo "❌ Section missing: $section_title"
              INVALID_SECTIONS="${INVALID_SECTIONS} - Seção '$section_title' está faltando.\n"
            else
              echo "✅ Section found: $section_title"
              # Extract content after section_title until the next section_title or end of document
              # This is a simplified approach; for complex templates, a more robust parsing might be needed.
              SECTION_CONTENT=$(echo "$PR_BODY" | awk "/$section_title/{flag=1;next}/^#### \*\*:/||/^<hr \/>/{flag=0}flag" | tr -d '\n')

              if echo "$SECTION_CONTENT" | grep -qE "$expected_content_regex"; then
                echo "❌ Section '$section_title' contains placeholder content."
                content_meaningful=false
                INVALID_SECTIONS="${INVALID_SECTIONS} - Conteúdo da seção '$section_title' parece ser um placeholder ou está vazio.\n"
              else
                echo "✅ Section '$section_title' content looks good."
              fi
            fi
          }

          # --- Perform Checks ---
          # Check for PR Title. The title is separate from the body, so it's a direct check.
          PR_TITLE="${{ github.event.pull_request.title }}"
          # O título do PR deve começar com "Feature" ou "Bugfix"
          # Usando (Feature|Bugfix) para corresponder a um OU outro, seguido por um espaço
          if [[ "$PR_TITLE" =~ ^(Feature|Bugfix)\  ]]; then
            echo "✅ PR Title starts with Feature or Bugfix."
          else
            echo "❌ PR Title does not start with Feature or Bugfix."
            INVALID_SECTIONS="${INVALID_SECTIONS} - O título do PR deve começar com 'Feature' ou 'Bugfix' (seguido por um espaço).\n"
          fi

          # Check for "Título da demanda" in the body (if you want to double-check, otherwise title is enough)
          if ! echo "$PR_BODY" | grep -q "^# \*\*:\clipboard: .*\*\*"; then
            echo "❌ Main title heading '# **:clipboard: ...**' not found or malformed in body."
            INVALID_SECTIONS="${INVALID_SECTIONS} - O cabeçalho principal '# **:clipboard: [TEXTO]**' está faltando ou não segue o padrão esperado no corpo do PR.\n"
          fi

          # Validate specific sections
          check_section "#### \*\*:rocket: Visão Geral\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"
          check_section "#### \*\*:sparkles: Mudanças Implementadas\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"
          check_section "\*\*:\mechanic: Evidências de testes local:\*\*" "lorem ipsum dolor sit amet consectetur adipisicing elit\.|^\s*$"


          if [ -n "$INVALID_SECTIONS" ]; then
            COMMENT_BODY="⚠️ **Validação do Template do PR Falhou!** ⚠️\n\nPor favor, corrija as seguintes questões no corpo do seu Pull Request para que ele siga o template:\n\n$INVALID_SECTIONS\n\n---"
            echo "COMMENT_BODY<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "::set-output name=validation_failed::true" >> $GITHUB_OUTPUT # Set output for subsequent step
            exit 1 # Fail the job
          else
            echo "::set-output name=validation_failed::false" >> $GITHUB_OUTPUT
            echo "✅ PR template is valid!"
          fi
        id: validate_template

      - name: Add comment on PR failure
        if: failure() && steps.validate_template.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `${{ steps.validate_template.outputs.COMMENT_BODY }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
